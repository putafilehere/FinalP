import java.sql.Time;
import java.util.*;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;

class Wave
{
  private int rushCount;
  private Enemy[][] wave;
  private int[] spacings;
  private int[] betweens;

  public Wave(Enemy[][] wave, int[] spacings, int[] betweens)
  {
    this.wave = wave;
    this.spacings = spacings;
    for (int i = 0; i < betweens.length; i++)
    {
      for (int j = 0; j < i; j++) {
        betweens[i] += betweens[j];
      }
    }
    this.betweens = betweens;
    rushCount = wave.length;
  }

  public void start(ArrayList<GameObject> objs)
  {
    ScheduledExecutorService[] rushTimers = new ScheduledExecutorService[rushCount];
    ScheduledExecutorService betweenDelay = Executors.newScheduledThreadPool(1);

    //initialize timers
    for (int i = 0; i < rushCount; i++)
    {
      rushTimers[i] = Executors.newScheduledThreadPool(1);
    }

    int totalTime = 0;

    for (int i = 0; i < rushCount; i++) {
      System.out.println("YAYYYY EYEEEE IIII WOOOO YEAHHH: " + i);
      int finalI = i; // Final variable for lambda
      totalTime += betweens[i];
      if (i > 0)
        totalTime += spacings[i-1] * rushCount;
      int[] enCount = {0};
      betweenDelay.schedule(() -> {
        rushTimers[finalI].scheduleAtFixedRate(() -> {
          if (enCount[0] == wave[finalI].length) {
            rushTimers[finalI].shutdown();
            return; // Exit lambda if condition met
          }
          objs.add(wave[finalI][enCount[0]++].clone());
        }, 0, spacings[finalI], TimeUnit.MILLISECONDS);
      }, totalTime, TimeUnit.MILLISECONDS);

    }

  }
}


this is my enemy class in java.

wave parameter is an array of enemy arrays (the enemy arrays are "rushes", and there are multiple rushes in one wave)

each single enemy in a rush is supposed to be spawned with a set time between them, with a corresponding int value inside of spacings. This works as expected. however, i also have an int array spacings, which has corresponding int values of the time between the rushes where the first index is always zero because there is no wait to the start of the first rush. this doesnt work. fix it.


yay